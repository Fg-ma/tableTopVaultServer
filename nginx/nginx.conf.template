worker_processes auto;
pid {{ PID }};

events {
    worker_connections 2048;
}

http {
    error_log {{ LOGS }}/error.log error;

    include {{ INSTALL }}/conf/mime.types;
    default_type application/octet-stream;

    # Max body size
    client_max_body_size 20M;

    # Limit buffer sizes
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # Limit request rate zone
    limit_req_zone $binary_remote_addr zone=api_rate_limit:10m rate=20r/s;
    
    # Limit connection zone
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Removes server version from header
    server_tokens off;

    map $http_upgrade $connection_upgrade {
        default   upgrade;
        ''        close;
    }

    sendfile on;
    keepalive_timeout 65;

    map $ssl_client_verify $is_mtls_valid {
        SUCCESS 1;
        default  0;
    }

    map "" $nginx_internal_token {
        default "";
        include {{ INTERNAL_TOKEN }};
    }

    gzip on;
    gzip_min_length 1000;
    gzip_types text/plain application/xml application/javascript application/json text/css text/xml application/xhtml+xml application/xml+rss image/svg+xml application/font-woff application/font-woff2 application/font-ttf font/woff font/woff2;
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_disable "msie6";
    gzip_vary on;

    server {
        listen 2222;
        server_name {{ IP }};

        return 301 https://$host:{{ PORT }}$request_uri;
    }

    server {
        listen {{ PORT }} ssl;
        http2 on;
        server_name {{ IP }};

        ssl_certificate {{ CERT }};
        ssl_certificate_key {{ KEY }};
        ssl_dhparam {{ DHPARAM }};

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_ecdh_curve X25519:P-256:P-384:P-521;
        ssl_prefer_server_ciphers on;

        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1h;
        ssl_session_tickets off;

        ssl_verify_client optional;
        ssl_client_certificate {{ CA }};

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload; must-staple" always;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4;

        # Connection timeouts
        client_header_timeout 5s;      
        client_body_timeout   10s;     
        send_timeout          30s;  

        add_header Content-Security-Policy "default-src 'none'; script-src 'self'; style-src 'self' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data:; object-src 'self'; connect-src 'self' wss://{{ IP }}:{{ PORT }} https://{{ IP }}:{{ PORT }}; upgrade-insecure-requests;" 
            always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Expect-CT "max-age=86400, enforce" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;

        location ^~ /ws/ {
            if ($is_mtls_valid = 0) {
                return 403;
            }

            proxy_pass         https://{{ IP }}:{{ SERVER_PORT }};
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection $connection_upgrade;
            proxy_set_header   Host $host;
            proxy_set_header   X-Internal-Token $nginx_internal_token;
            proxy_set_header   Origin "https://{{ IP }}:{{ PORT }}";

            proxy_ssl_verify       on;
            proxy_ssl_verify_depth 2;
            proxy_ssl_protocols    TLSv1.2 TLSv1.3;
            proxy_ssl_trusted_certificate {{ CA }};
            proxy_ssl_name {{ IP }};
            proxy_ssl_server_name on;

            proxy_read_timeout  3600s;
            proxy_send_timeout  3600s;

            limit_req zone=api_rate_limit burst=20 nodelay;
            limit_conn conn_limit 10;
        }

        location / { 
            # Allow only GET, POST, OPTIONS
            limit_except GET POST OPTIONS {
                deny all;
            }

            if ($request_method !~ ^(GET|POST|OPTIONS)$) {
                return 405;
            }

            # Set up proxy
            proxy_pass         https://{{ IP }}:{{ SERVER_PORT }};
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection $connection_upgrade;
            proxy_set_header   Host $host;
            proxy_set_header   X-Internal-Token $nginx_internal_token;
            proxy_set_header   Origin "https://{{ IP }}:{{ PORT }}";

            proxy_ssl_verify       on;
            proxy_ssl_verify_depth 2;
            proxy_ssl_protocols    TLSv1.2 TLSv1.3;
            proxy_ssl_trusted_certificate {{ CA }};

            proxy_ssl_name {{ IP }};  
            proxy_ssl_server_name on;

            proxy_read_timeout  3600s;
            proxy_send_timeout  3600s;

            # Allow burst request overage
            limit_req zone=api_rate_limit burst=20 nodelay;
        
            # Limit number of connections per ip
            limit_conn conn_limit 10;

            # Don't cache anything with authorization header
            proxy_cache_bypass $http_authorization;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
}
